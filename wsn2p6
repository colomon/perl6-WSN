# use Grammar::Tracer;

# SYNTAX     = { PRODUCTION } .
# PRODUCTION = IDENTIFIER "=" EXPRESSION "." .
# EXPRESSION = TERM { "|" TERM } .
# TERM       = FACTOR { FACTOR } .
# FACTOR     = IDENTIFIER
#            | LITERAL
#            | "[" EXPRESSION "]"
#            | "(" EXPRESSION ")"
#            | "{" EXPRESSION "}" .
# IDENTIFIER = letter { letter } .
# LITERAL    = """" character { character } """" .

grammar WSN {
    rule TOP { ^ <production>* $ }
    rule production { <identifier> "=" <expression> "." }
    rule expression { <term> [ "|" <term> ]* }
    rule term { <factor> <factor>* }
    rule factor { <identifier> | <literal> | <square> | <paren> | <curly> | <special-char> }
    rule square { '[' <expression> ']' }
    rule paren  { '(' <expression> ')' }
    rule curly  { '{' <expression> '}' }
    regex identifier { \w+ }
    regex literal { [ '"' \S+ '"' ] | [ "'" \S+ "'" ] } # change from Wikipedia spec to match ISO 10303 usage
    regex special-char { '\\' [ 'a' | 'q' | 's' | 'n' | 'x8' | 'x9' | 'xA' | 'xB' | 'xC' | 'xD' ] }
}

class WSN-Actions {
    sub wrap-if-needed($s) {
        $s ~~ /\s/ ?? "[ $s ]" !! $s;
    }
    
    method TOP($/) { make $<production>».ast.join("\n"); }
    method production($/) {
        # say $<identifier>.ast;
        make "    regex " ~ $<identifier>.ast ~ ' { :i :s ' ~ $<expression>.ast ~ ' } ';
    }
    method expression($/) {
        make $<term> > 1
                ?? $<term>».ast.map({ wrap-if-needed($_) }).join(' | ')
                !! $<term>[0].ast; 
    }
    method term($/) { make $<factor>».ast.join(' '); }
    method factor($/) {
        if $<identifier> {
            make '<' ~ $<identifier>.ast ~ '>';
        } elsif $<literal> {
            make $<literal>.ast;
        } elsif $<square> {
            make $<square>.ast;
        } elsif $<paren> {
            make $<paren>.ast;
        } elsif $<curly> {
            make $<curly>.ast;
        } elsif $<special-char> {
            make $<special-char>.ast;
        } else {
            die "Who am I?";
        }
    }
    method square($/) { make wrap-if-needed($<expression>.ast) ~ '?' }
    method paren($/)  { make '[' ~ $<expression>.ast ~ ']' }
    method curly($/)  { make wrap-if-needed($<expression>.ast) ~ '*' }
    method identifier($/) { make ~$/ }
    method literal($/) { make $/.subst(/^ '"'/, "'").subst(/'"' $/, "'").subst(/'""'/, '"').subst(/'\\'/, '\\\\') }
    method special-char($/) {
        given $/ {
            when '\\a' { make "<alpha>"; }
            when '\\q' { make q{ '"' }; }
            default { make ~$/; }
        }
    }
}

sub MAIN($filename, :$name, :$test?, :$trace?) {
    my $file-data = slurp($filename);
    my $match = WSN.parse($file-data, :actions(WSN-Actions.new));

    if $trace {
        say "use Grammar::Tracer;";
        say "";
    }
    
    say "grammar $name \{";
    say $match.ast;
    say "\}";
    if $test {
        say "";
        say 'sub MAIN($filename) {';
        say '    my $file-data = slurp($filename);';
        say "    my \$match = { $name }.parse(\$file-data, :rule<{ $test }>);";
        say '    say $match;';
        say '}';
    }
}
